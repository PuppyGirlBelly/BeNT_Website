---
import type { InferGetStaticParamsType, InferGetStaticPropsType, GetStaticPaths } from 'astro';
import BaseLayout from '../../layouts/base_layout.astro';
import BlogLink from '../../components/blogLink.astro';

export const getStaticPaths = (async () => {
    const allPosts: any = await Astro.glob('../posts/*.md');

    const uniqueTags: any[] = [...new Set(allPosts.map((post: { frontmatter: { tags: string[]; }; }) => post.frontmatter.tags).flat())];
    return uniqueTags.map((tag: string) => {
        const filteredPosts: string[] = allPosts.filter((post: { frontmatter: { tags: string[]; }; }) => post.frontmatter.tags?.includes(tag));
        return {
            params: { tag },
            props: { posts: filteredPosts },
        };
    });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { tag } = Astro.params as Params;
const { posts } = Astro.props as Props;
---
<BaseLayout pageTitle={`Tagged as "${tag}"`}>
  <p>Posts tagged with {tag}</p>
  <ul>
        {posts.map((post: any) => <BlogLink url={post.url} frontmatter={post.frontmatter}/>)}
  </ul>
</BaseLayout>
